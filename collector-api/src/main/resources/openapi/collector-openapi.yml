openapi: 3.0.3
info:
  title: API для управления коллекторской информацией
  version: 1.0.0
servers:
  - url: http://localhost:30004/api
tags:
  - name: agreement
    description: Операции над договорами
  - name: debtor
    description: Операции над заемщиками и участниками договоров
  - name: address
    description: Операции над адресами заемщиков и участников договоров
  - name: document
    description: Операции над документами заемщиков и участников договоров
paths:
  /agreements:
    get:
      tags:
        - agreement
      summary: 'Получение списка договоров с пагинацией'
      operationId: getAllAgreements
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/SortDirection'
        - $ref: '#/components/parameters/Transferor'
        - $ref: '#/components/parameters/GetAllAgreementStatus'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePageAgreement'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - agreement
      summary: 'Создание договора'
      operationId: createAgreement
      parameters:
        - $ref: '#/components/parameters/Key'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestAgreementDTO'
        required: true
      responses:
        '201':
          description: Agreement created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseAgreementDTO'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /agreement/{agreementId}:
    get:
      tags:
        - agreement
      summary: Получение информации о договоре по ID
      operationId: getAgreement
      parameters:
        - $ref: '#/components/parameters/AgreementId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseAgreementDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - agreement
      summary: Удаление договора по ID
      operationId: deleteAgreement
      parameters:
        - $ref: '#/components/parameters/AgreementId'
      responses:
        '200':
          description: Agreement removed
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /agreements/{agreementId}/status:
    patch:
      tags:
        - agreement
      summary: Изменение статуса договора по ID
      operationId: updateAgreementStatus
      parameters:
        - $ref: '#/components/parameters/AgreementId'
        - $ref: '#/components/parameters/AgreementStatus'
      responses:
        '200':
          description: Agreement status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUpdateStatusDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /debtors/{debtorId}:
    get:
      tags:
        - debtor
      summary: Получение информации о заемщике по ID
      operationId: getDebtor
      parameters:
        - $ref: '#/components/parameters/DebtorId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGetDebtorDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - debtor
      summary: Изменение данных заемщика по ID
      operationId: updateDebtor
      parameters:
        - $ref: '#/components/parameters/DebtorId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUpdateDebtorDTO'
        required: true
      responses:
        '200':
          description: Debtor updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUpdateDebtorDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /debtors/{debtorId}/{agreementId}:
    delete:
      tags:
        - debtor
      summary: Удаление заемщика из договора по ID договора и ID заемщика
      operationId: deleteDebtorFromAgreement
      parameters:
        - $ref: '#/components/parameters/DebtorId'
        - $ref: '#/components/parameters/AgreementId'
      responses:
        '200':
          description: Debtor removed
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /debtors/{debtorId}/address:
    get:
      tags:
        - address
      summary: Получение информации о адресах заемщика по его ID
      operationId: getDebtorAddresses
      parameters:
        - $ref: '#/components/parameters/DebtorId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseAddressDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - address
      summary: Замена или добавление адреса заемщика по его ID
      operationId: updateDebtorAddress
      parameters:
        - $ref: '#/components/parameters/DebtorId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestAddressDTO'
        required: true
      responses:
        '200':
          description: Address updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUpdateAddressDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - address
      summary: Удаление адреса заемщика по его ID
      operationId: deleteAddress
      parameters:
        - $ref: '#/components/parameters/DebtorId'
        - $ref: '#/components/parameters/AddressStatus'
      responses:
        '200':
          description: Address removed
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /debtors/{debtorId}/document:
    get:
      tags:
        - document
      summary: Получение списка документов заемщика
      operationId: getDebtorDocuments
      parameters:
        - $ref: '#/components/parameters/DebtorId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseDocumentDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /debtors/{debtorId}/document/file:
    post:
      tags:
        - document
      summary: Загрузка файла документа
      operationId: uploadDocumentFile
      parameters:
        - $ref: '#/components/parameters/DebtorId'
        - $ref: '#/components/parameters/DocumentType'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Файл документа
              required:
                - file
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                example: 'Файл debtors/15/documents/national-passport.pdf загружен'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - document
      summary: Скачивание файла документа
      operationId: downloadDocumentFile
      parameters:
        - $ref: '#/components/parameters/DebtorId'
        - $ref: '#/components/parameters/DocumentType'
      responses:
        '200':
          description: File is ready for download
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Type:
              schema:
                type: string
            Content-Length:
              schema:
                type: string
            Content-Disposition:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /debtors/{debtorId}/notification/{agreementId}:
    get:
      tags:
        - document
      summary: Получение уведомления виде текстового файла
      description: Генерирует и возвращает текстовый файл с уведомлением для указанного заемщика и договора
      operationId: getNotification
      parameters:
        - $ref: '#/components/parameters/DebtorId'
        - $ref: '#/components/parameters/AgreementId'
      responses:
        '200':
          description: File is ready for download
          headers:
            Content-Disposition:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Content-Length:
              schema:
                type: string
            Location:
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
                format: binary
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  parameters:
    DebtorId:
      in: path
      name: debtorId
      description: 'ID заемщика'
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    AgreementId:
      in: path
      name: agreementId
      description: 'ID договора займа'
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    AddressStatus:
      in: query
      name: status
      required: true
      schema:
        allOf:
          - $ref: '#/components/schemas/AddressStatus'
          - x-field-extra-annotation: |
              @jakarta.validation.constraints.Pattern(regexp = "registration|residential", message = "Неверный статус адреса в запросе")
    Key:
      in: query
      name: key
      required: true
      description: 'Ключ идемпотентности (64 бит)'
      schema:
        type: string
        example: '123456'
    AgreementStatus:
      in: query
      name: status
      required: true
      description: 'Новый статус договора (paid или active)'
      schema:
        type: string
        example: 'paid'
        enum:
          - paid
          - active
    Page:
      in: query
      name: page
      required: true
      description: 'Номер страницы из запрашиваемой выборки'
      schema:
        type: integer
        format: int32
        example: 2
    Size:
      in: query
      name: size
      required: true
      description: 'Количество элементов на странице в запрашиваемой выборке'
      schema:
        type: integer
        format: int32
        example: 12
    SortBy:
      in: query
      name: sortBy
      required: true
      description: 'Параметр, по которому будет производиться сортировка'
      schema:
        type: string
        example: 'transferor'
        enum:
          - originalDebtSum
          - actualDebtSum
          - agreementStartDate
          - transferor
          - status
    SortDirection:
      in: query
      name: sortDirection
      required: false
      description: 'Направление сортировки (возрастание или убывание)'
      schema:
        type: string
        example: 'desc'
        enum:
          - asc
          - desc
        default: 'asc'
    Transferor:
      in: query
      name: transferor
      description: 'Название банка-кредитора для фильтрации'
      required: false
      schema:
        $ref: '#/components/schemas/Transferor'
    GetAllAgreementStatus:
      in: query
      name: status
      description: 'Статус договора для фильтрации'
      required: false
      schema:
        $ref: '#/components/schemas/AgreementStatus'
    DocumentType:
      in: query
      name: type
      required: true
      description: 'Тип документа заемщика для загрузки файла'
      schema:
        type: string
        example: 'national-passport'
        enum:
          - national-passport
          - international-passport
          - driver-license
          - inn
          - snils
        x-field-extra-annotation: |
          @jakarta.validation.constraints.Pattern(regexp = "registration|residential", message = "Неверный статус адреса в запросе")
  schemas:
    ErrorResponse:
      type: object
      description: 'Модель ошибки'
      properties:
        timestamp:
          type: string
          description: 'Дата и время создания ответа с ошибкой'
          format: date-time
          example: "2025-09-18T16:43:19.973103766"
        status:
          type: integer
          description: 'Код ответа'
          example: '409'
        error:
          type: string
          description: 'Расшифровка кода ответа'
          example: 'Conflict'
        message:
          type: string
          description: 'Информационное сообщение ошибки'
          example: 'В базе данных есть другой заемщик с такими документами'
        path:
          type: string
          description: 'Путь по которому был отправлен запрос'
          example: '/api/agreements'
    RequestAddressDTO:
      type: object
      description: 'Модель данных для POST запроса, создания адресов'
      properties:
        country:
          nullable: false
          minLength: 1
          allOf:
            - $ref: '#/components/schemas/Country'
            - x-field-extra-annotation: "@jakarta.validation.constraints.NotBlank(message = \"Страна обязательна\")"
        city:
          nullable: false
          minLength: 1
          allOf:
            - $ref: '#/components/schemas/City'
            - x-field-extra-annotation: "@jakarta.validation.constraints.NotBlank(message = \"Название города обязательно\")"
        street:
          minLength: 1
          nullable: false
          allOf:
            - $ref: '#/components/schemas/Street'
            - x-field-extra-annotation: "@jakarta.validation.constraints.NotBlank(message = \"Название улицы обязательно\")"
        house:
          minLength: 1
          nullable: false
          allOf:
            - $ref: '#/components/schemas/House'
            - x-field-extra-annotation: "@jakarta.validation.constraints.NotBlank(message = \"Дом обязателен\")"
        apartment:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Apartment'
        addressStatus:
          minLength: 1
          nullable: false
          allOf:
            - $ref: '#/components/schemas/AddressStatus'
            - x-field-extra-annotation: |
                @jakarta.validation.constraints.NotBlank(message = "Статус обязателен")
                @jakarta.validation.constraints.Pattern(regexp = "registration|residential", message = "Статус адреса должен быть 'registration' или 'residential'")
      required:
        - country
        - city
        - street
        - house
        - addressStatus
    RequestDocumentDTO:
      type: object
      description: 'Модель данных для POST запроса, создания документа заемщика'
      properties:
        documentType:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/DocumentType'
            - x-field-extra-annotation: "@jakarta.validation.constraints.NotNull"
        documentNumber:
          minLength: 1
          nullable: false
          allOf:
            - $ref: '#/components/schemas/DocumentNumber'
            - x-field-extra-annotation: "@jakarta.validation.constraints.NotBlank(message = \"Номер документа обязателен\")"
        issueDate:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/IssueDate'
            - x-field-extra-annotation: |
                @jakarta.validation.constraints.NotNull(message = "Дата выдачи документа обязательна")
                @jakarta.validation.constraints.PastOrPresent(message = "Дата выдачи документа должна быть текущей датой или ранее")
      required:
        - documentType
        - documentNumber
        - issueDate
    RequestDebtorDTO:
      type: object
      description: 'Модель данных для POST запроса, создания заемщика'
      properties:
        firstname:
          nullable: false
          minLength: 1
          allOf:
            - $ref: '#/components/schemas/FirstName'
            - x-field-extra-annotation: |
                @jakarta.validation.constraints.NotBlank(message = "Имя обязательно")
                @jakarta.validation.constraints.Pattern(regexp = "^[а-яА-ЯёЁa-zA-Z-]+$", message = "Имя может содержать только буквы и дефис")
        lastname:
          nullable: false
          minLength: 1
          allOf:
            - $ref: '#/components/schemas/LastName'
            - x-field-extra-annotation: |
                @jakarta.validation.constraints.NotBlank(message = "Фамилия обязательна")
                @jakarta.validation.constraints.Pattern(regexp = "^[а-яА-ЯёЁa-zA-Z-]+$", message = "Фамилия может содержать только буквы и дефис")
        patronymic:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Patronymic'
            - x-field-extra-annotation: |
                @jakarta.validation.constraints.Pattern(regexp = "^[а-яА-ЯёЁa-zA-Z-]+$", message = "Отчество может содержать только буквы и дефис")
        birthday:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/Birthday'
            - x-field-extra-annotation: |
                @jakarta.validation.constraints.NotNull(message = "Дата рождения обязательна")
                @jakarta.validation.constraints.Past(message = "Дата рождения должна быть в прошлом")
        gender:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/Gender'
            - x-field-extra-annotation: "@jakarta.validation.constraints.NotNull(message = \"Пол обязателен\")"
        role:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/Role'
            - x-field-extra-annotation: |
                @jakarta.validation.constraints.NotBlank(message = "Роль заемщика в договоре обязательна")
                @jakarta.validation.constraints.Pattern(regexp = "co-debtor|single debtor|guarantor|charger",
                message = "Роль заемщика в договоре должна быть 'co-debtor', 'single debtor', 'guarantor' или 'charger'")
        phoneNumber:
          nullable: true
          $ref: '#/components/schemas/PhoneNumber'
          x-field-extra-annotation: |
                @jakarta.validation.constraints.Pattern(regexp = "^(\\+7|7|8)?[0-9\\s\\-\\(\\)]{10,15}$",
                message = "Некорректный формат номера телефона")
        addressDTOs:
          type: array
          description: 'Список адресов заемщика'
          minItems: 1
          items:
            $ref: '#/components/schemas/RequestAddressDTO'
            x-field-extra-annotation: "@jakarta.validation.Valid"
        documentDTOs:
          type: array
          description: 'Список документов заемщика'
          minItems: 1
          items:
            $ref: '#/components/schemas/RequestDocumentDTO'
            x-field-extra-annotation: "@jakarta.validation.Valid"
      required:
        - firstname
        - lastname
        - birthday
        - gender
        - role
        - addressDTOs
        - documentDTOs
    RequestAgreementDTO:
      type: object
      description: 'Модель данных для POST запроса, создания договора'
      properties:
        originalDebtSum:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/OriginalDebtSum'
            - x-field-extra-annotation: |
                @jakarta.validation.constraints.NotNull(message = "Сумма долга по договору обязательна")
                @jakarta.validation.constraints.DecimalMin(value = "0.0", message = "Сумма долга по договору не может быть отрицательной")
        actualDebtSum:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/ActualDebtSum'
            - x-field-extra-annotation: |
                @jakarta.validation.constraints.NotNull(message = "Текущий остаток по договору обязателен")
                @jakarta.validation.constraints.DecimalMin(value = "0.0", message = "Текущий остаток по договору не может быть отрицательным")
        agreementStartDate:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/AgreementStartDate'
            - x-field-extra-annotation: |
                @jakarta.validation.constraints.NotNull(message = "Дата подписания договора обязательна")
                @jakarta.validation.constraints.PastOrPresent(message = "Дата подписания договора должна быть текущей датой или ранее")
        transferor:
          nullable: false
          minLength: 1
          allOf:
            -  $ref: '#/components/schemas/Transferor'
            - x-field-extra-annotation: "@jakarta.validation.constraints.NotBlank(message = \"Название банка-кредитора обязательно\")"
        debtors:
          type: array
          description: 'Список заемщиков и других учатсников договора'
          minItems: 1
          items:
            $ref: '#/components/schemas/RequestDebtorDTO'
            x-field-extra-annotation: "@jakarta.validation.Valid"
      required:
        - originalDebtSum
        - actualDebtSum
        - agreementStartDate
        - transferor
        - debtors
    RequestUpdateDebtorDTO:
      type: object
      description: 'Модель данных для PATCH запроса, изменения данных заемщика'
      properties:
        firstname:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/FirstName'
            - x-field-extra-annotation: |
                @jakarta.validation.constraints.Pattern(regexp = "^[а-яА-ЯёЁa-zA-Z-]+$", message = "Имя может содержать только буквы и дефис")
        lastname:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/LastName'
            - x-field-extra-annotation: |
                @jakarta.validation.constraints.Pattern(regexp = "^[а-яА-ЯёЁa-zA-Z-]+$", message = "Фамилия может содержать только буквы и дефис")
        patronymic:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Patronymic'
            - x-field-extra-annotation: |
                @jakarta.validation.constraints.Pattern(regexp = "^[а-яА-ЯёЁa-zA-Z-]+$", message = "Отчество может содержать только буквы и дефис")
        birthday:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Birthday'
            - x-field-extra-annotation: |
                @jakarta.validation.constraints.Past(message = "Дата рождения должна быть в прошлом")
        gender:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Gender'
        phoneNumber:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/PhoneNumber'
            - x-field-extra-annotation: |
                @jakarta.validation.constraints.Pattern(regexp = "^(\\+7|7|8)?[0-9\\s\\-\\(\\)]{10,15}$",
                message = "Некорректный формат номера телефона")
    ResponseAddressDTO:
      type: object
      description: 'Модель данных для ответа на GET запрос, возвращаемый адрес'
      properties:
        country:
          $ref: '#/components/schemas/Country'
        city:
          $ref: '#/components/schemas/City'
        street:
          $ref: '#/components/schemas/Street'
        house:
          $ref: '#/components/schemas/House'
        apartment:
          $ref: '#/components/schemas/Apartment'
        addressStatus:
          $ref: '#/components/schemas/AddressStatus'
    ResponseDocumentDTO:
      type: object
      description: 'Модуль данных для ответа на GET запрос, возвращаемый документ'
      properties:
        documentType:
          $ref: '#/components/schemas/DocumentType'
        documentNumber:
          $ref: '#/components/schemas/DocumentNumber'
        issueDate:
          $ref: '#/components/schemas/IssueDate'
    ResponseDebtorDTO:
      type: object
      description: 'Модель данных для ответа на POST запрос загрузки данных договора'
      properties:
        id:
          $ref: '#/components/schemas/Id'
        firstname:
          $ref: '#/components/schemas/FirstName'
        lastname:
          $ref: '#/components/schemas/LastName'
        patronymic:
          $ref: '#/components/schemas/Patronymic'
        birthday:
          $ref: '#/components/schemas/Birthday'
        gender:
          $ref: '#/components/schemas/Gender'
        role:
          $ref: '#/components/schemas/Role'
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
        addressDTOs:
          type: array
          description: 'Список загруженных адресов'
          items:
            $ref: '#/components/schemas/ResponseAddressDTO'
        documentDTOs:
          type: array
          description: 'Список загруженных документов'
          items:
            $ref: '#/components/schemas/ResponseDocumentDTO'
    ResponseAgreementDTO:
      type: object
      description: 'Модель данных для ответа на POST запрос загрузки данных договора'
      properties:
        id:
          $ref: '#/components/schemas/Id'
        originalDebtSum:
          $ref: '#/components/schemas/OriginalDebtSum'
        actualDebtSum:
          $ref: '#/components/schemas/ActualDebtSum'
        agreementStartDate:
          $ref: '#/components/schemas/AgreementStartDate'
        transferor:
          $ref: '#/components/schemas/Transferor'
        status:
          $ref: '#/components/schemas/AgreementStatus'
        debtorDTOs:
          type: array
          description: 'Список загруженных заемщиков'
          items:
            $ref: '#/components/schemas/ResponseDebtorDTO'
    ResponseGetDebtorDTO:
      type: object
      description: 'Модель данных для ответа на GET запрос получения информации о заемщике'
      properties:
        id:
          $ref: '#/components/schemas/Id'
        firstname:
          $ref: '#/components/schemas/FirstName'
        lastname:
          $ref: '#/components/schemas/LastName'
        patronymic:
          $ref: '#/components/schemas/Patronymic'
        birthday:
          $ref: '#/components/schemas/Birthday'
        gender:
          $ref: '#/components/schemas/Gender'
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
        addressDTOs:
          type: array
          description: 'Список адресов запрашиваемого заемщика'
          items:
            $ref: '#/components/schemas/ResponseAddressDTO'
        documentDTOs:
          type: array
          description: 'Список документов запрашиваемого заемщика'
          items:
            $ref: '#/components/schemas/ResponseDocumentDTO'
    ResponsePageAgreement:
      type: object
      description: 'Модель данных для страницы данных договоров с пагинацией'
      properties:
        content:
          type: array
          description: 'Список отфильтрованных договоров'
          items:
            $ref: '#/components/schemas/AgreementDTO'
        currentPage:
          type: integer
          format: int32
          description: 'Номер текущей страницы (начиная с 0)'
          example: 0
        totalPages:
          type: integer
          format: int32
          description: 'Общее количестов страниц'
          example: 5
        totalElements:
          type: integer
          format: int64
          description: 'Суммарное количество элементов со всех страниц'
          example: 132
        size:
          type: integer
          format: int32
          description: 'Размер страницы (количество элеметнов)'
          example: 10
    ResponseUpdateAddressDTO:
      type: object
      description: 'Модель данных для ответа на UPDATE запросы изменения адресов'
      properties:
        debtorId:
          $ref: '#/components/schemas/Id'
        country:
          $ref: '#/components/schemas/Country'
        city:
          $ref: '#/components/schemas/City'
        street:
          $ref: '#/components/schemas/Street'
        house:
          $ref: '#/components/schemas/House'
        apartment:
          $ref: '#/components/schemas/Apartment'
        addressStatus:
          $ref: '#/components/schemas/AddressStatus'
    ResponseUpdateDebtorDTO:
      type: object
      description: 'Модель данных для ответа на UPDATE запросы изменения данных заемщиков'
      properties:
        id:
          $ref: '#/components/schemas/Id'
        firstname:
          $ref: '#/components/schemas/FirstName'
        lastname:
          $ref: '#/components/schemas/LastName'
        patronymic:
          $ref: '#/components/schemas/Patronymic'
        birthday:
          $ref: '#/components/schemas/Birthday'
        gender:
          $ref: '#/components/schemas/Gender'
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
    ResponseUpdateStatusDTO:
      type: object
      description: 'Модель данных для ответа на UPDATE запросы изменения статуса договора'
      properties:
        agreementId:
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/AgreementStatus'
    AgreementDTO:
      type: object
      description: 'Модель данных договоров без привязки заемщиков'
      properties:
        id:
          $ref: '#/components/schemas/Id'
        originalDebtSum:
          $ref: '#/components/schemas/OriginalDebtSum'
        actualDebtSum:
          $ref: '#/components/schemas/ActualDebtSum'
        agreementStartDate:
          $ref: '#/components/schemas/AgreementStartDate'
        transferor:
          $ref: '#/components/schemas/Transferor'
        status:
          $ref: '#/components/schemas/AgreementStatus'
    AgreementStatus:
      type: string
      description: 'Статус договора (дуйствует, долг выплачен, удален)'
      example: 'active'
      enum:
        - 'active'
        - 'paid'
        - 'deleted'
    Id:
      type: integer
      format: int64
      description: 'ID число-идентификатор (64 бит)'
      example: 1
    OriginalDebtSum:
      type: number
      format: bigdecimal
      description: 'Сумма долга по договору займа'
      example: 5000000.00
      minimum: 0.0
      exclusiveMinimum: false
    ActualDebtSum:
      type: number
      format: bigdecimal
      description: 'Текущий остаток долга по договору займа'
      example: 3000000.00
      minimum: 0.0
      exclusiveMinimum: false
    AgreementStartDate:
      type: string
      format: date
      example: '2023-06-06'
    Transferor:
      type: string
      description: 'Название банка-кредитора'
      example: 'Сбербанк'
    FirstName:
      type: string
      description: 'Имя заемщика'
      example: 'Иван'
    LastName:
      type: string
      description: 'Фамилия заемщика'
      example: 'Иванов'
    Patronymic:
      type: string
      description: 'Отчество заемщика'
      example: 'Иванович'
    Birthday:
      type: string
      description: 'Дата рождения заемщика'
      format: date
      example: '2000-01-01'
    Gender:
      type: string
      description: 'Пол заемщика'
      example: 'male'
      enum:
        - 'male'
        - 'female'
        - 'unknown'
    Role:
      type: string
      description: 'Роль заемщика в договоре займа'
      example: 'single debtor'
      enum:
        - co-debtor
        - 'single debtor'
        - guarantor
        - charger
    PhoneNumber:
      type: string
      description: 'Телефонный номер заемщика'
      example: '+79261854567'
    DocumentType:
      type: string
      description: 'Тип документа'
      example: 'NATIONAL_PASSPORT'
      enum:
        - 'NATIONAL_PASSPORT'
        - 'INTERNATIONAL_PASSPORT'
        - 'DRIVER_LICENSE'
        - 'INN'
        - 'SNILS'
    DocumentNumber:
      type: string
      description: 'Номер документа'
      example: '4508731456'
    IssueDate:
      type: string
      description: 'Дата выдачи документа'
      format: date
      example: '2010-02-02'
    Country:
      type: string
      description: 'Страна'
      example: 'Россия'
    City:
      type: string
      description: 'Город'
      example: 'Москва'
    Street:
      type: string
      description: 'Улица'
      example: 'Тверская'
    House:
      type: string
      description: 'Номер дома'
      example: '22'
    Apartment:
      type: string
      description: 'Номер квартиры'
      example: '22'
    AddressStatus:
      type: string
      description: 'Статус адреса заемщика (прописка или проживание)'
      example: 'registration'
      enum:
        - 'registration'
        - 'residential'